{"version":3,"sources":["logo.svg","data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","data","App","useState","ratesArr","setRatesArr","useEffect","Promise","resolve","then","value","Object","entries","rates","className","map","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,wGCA9BC,G,YAAO,CAClB,OAAS,EACT,UAAa,WACb,KAAQ,MACR,MAAS,CACT,IAAO,QACL,IAAO,QACP,IAAO,UACP,IAAO,UACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,QACP,IAAO,IACP,IAAO,IACP,IAAO,MACP,IAAO,QACP,IAAO,qBACP,IAAO,SACP,IAAO,QACP,IAAO,OACP,IAAO,UACP,IAAO,EACP,IAAO,QACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,sBACP,IAAO,mBACP,IAAO,SACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,MACP,IAAO,QACP,IAAO,UACP,IAAO,EACP,IAAO,OACP,IAAO,UACP,IAAO,SACP,KAAQ,oBACR,IAAO,QACP,IAAO,OACP,IAAO,SACP,IAAO,QACP,IAAO,SACP,IAAO,mBACP,IAAO,QACP,IAAO,oBACP,IAAO,OACP,IAAO,QACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,QACP,IAAO,WACP,IAAO,QACP,IAAO,UACP,IAAO,OACP,IAAO,SACP,IAAO,QACP,IAAO,SACP,IAAO,OACP,IAAO,WACP,IAAO,MACP,IAAO,OACP,IAAO,WACP,IAAO,QACP,IAAO,SACP,IAAO,UACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,UACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,UACP,IAAO,WACP,IAAO,WACP,IAAO,UACP,IAAO,UACP,IAAO,QACP,IAAO,oBACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,UACP,IAAO,QACP,IAAO,SACP,IAAO,OACP,IAAO,SACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,QACP,IAAO,OACP,IAAO,SACP,IAAO,OACP,IAAO,UACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,UACP,IAAO,OACP,IAAO,WACP,IAAO,OACP,IAAO,QACP,IAAO,SACP,IAAO,QACP,IAAO,UACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,QACP,IAAO,OACP,IAAO,IACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,QACP,IAAO,IACP,IAAO,QACP,IAAO,QACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,UACP,IAAO,EACP,IAAO,SACP,IAAO,UACP,IAAO,SACP,IAAO,UACP,IAAO,oBACP,IAAO,qBACP,IAAO,QACP,IAAO,mBACP,IAAO,UACP,IAAO,kBACP,IAAO,SACP,IAAO,QACP,IAAO,YCnIIC,MApBf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAUb,OAPAC,qBAAU,WACQC,QAAQC,QAAQP,GACxBQ,MAAK,SAACC,GACZL,EAAYM,OAAOC,QAAQF,EAAMG,aAElC,IAGD,yBAAKC,UAAU,SACb,qCACA,wBAAIA,UAAU,cACXV,EAASW,KAAI,SAAAC,GAAI,OAAI,wBAAIF,UAAU,cAAcE,EAAK,GAAjC,MAAwCA,EAAK,UCPvDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9983d1eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const data = {\r\n  \"valid\": true,\r\n  \"timestamp\": 1582195447,\r\n  \"base\": \"USD\",\r\n  \"rates\": {\r\n  \"AED\": 3.67338,\r\n    \"AFN\": 77.8079,\r\n    \"ALL\": 113.23065,\r\n    \"AMD\": 478.14251,\r\n    \"ANG\": 1.78845,\r\n    \"AOA\": 493.9822,\r\n    \"ARS\": 61.66319,\r\n    \"AUD\": 1.50684,\r\n    \"AWG\": 1.8,\r\n    \"AZN\": 1.7,\r\n    \"BAM\": 1.811,\r\n    \"BBD\": 2.01732,\r\n    \"BCH\": 0.0026295030239284773,\r\n    \"BDT\": 84.88116,\r\n    \"BGN\": 1.81119,\r\n    \"BHD\": 0.37698,\r\n    \"BIF\": 1883.9902,\r\n    \"BMD\": 1,\r\n    \"BND\": 1.39136,\r\n    \"BOB\": 6.90982,\r\n    \"BRL\": 4.36582,\r\n    \"BSD\": 0.99917,\r\n    \"BTC\": 0.00010430672016906032,\r\n    \"BTG\": 0.09900990099009901,\r\n    \"BWP\": 10.99162,\r\n    \"BZD\": 2.01399,\r\n    \"CAD\": 1.32493,\r\n    \"CDF\": 1686.1,\r\n    \"CHF\": 0.98284,\r\n    \"CLP\": 796.23,\r\n    \"CNH\": 7.02971,\r\n    \"CNY\": 7.029,\r\n    \"COP\": 3385.67,\r\n    \"CRC\": 567.00515,\r\n    \"CUC\": 1,\r\n    \"CUP\": 0.99899,\r\n    \"CVE\": 102.10001,\r\n    \"CZK\": 23.16515,\r\n    \"DASH\": 0.009672115291614276,\r\n    \"DJF\": 177.729,\r\n    \"DKK\": 6.9152,\r\n    \"DOP\": 53.33415,\r\n    \"DZD\": 120.936,\r\n    \"EGP\": 15.59628,\r\n    \"EOS\": 0.25144581342720645,\r\n    \"ETB\": 31.8418,\r\n    \"ETH\": 0.003866976024748646,\r\n    \"EUR\": 0.92612,\r\n    \"FJD\": 2.20721,\r\n    \"GBP\": 0.77471,\r\n    \"GEL\": 2.82515,\r\n    \"GHS\": 5.32477,\r\n    \"GIP\": 0.81292,\r\n    \"GMD\": 50.8725,\r\n    \"GNF\": 9519.70895,\r\n    \"GTQ\": 7.62428,\r\n    \"GYD\": 208.40372,\r\n    \"HKD\": 7.7788,\r\n    \"HNL\": 24.61633,\r\n    \"HRK\": 6.89836,\r\n    \"HTG\": 97.52467,\r\n    \"HUF\": 312.74,\r\n    \"IDR\": 13810.6405,\r\n    \"ILS\": 3.433,\r\n    \"INR\": 71.589,\r\n    \"IQD\": 1192.91165,\r\n    \"IRR\": 42107.1,\r\n    \"ISK\": 127.7165,\r\n    \"JMD\": 140.87825,\r\n    \"JOD\": 0.70914,\r\n    \"JPY\": 111.969,\r\n    \"KES\": 101.365,\r\n    \"KGS\": 69.85239,\r\n    \"KHR\": 4088.4324,\r\n    \"KMF\": 456.473,\r\n    \"KRW\": 1204.77,\r\n    \"KWD\": 0.30657,\r\n    \"KYD\": 0.83261,\r\n    \"KZT\": 376.44802,\r\n    \"LAK\": 8895.31975,\r\n    \"LBP\": 1510.69955,\r\n    \"LKR\": 181.84229,\r\n    \"LRD\": 196.88485,\r\n    \"LSL\": 14.9805,\r\n    \"LTC\": 0.014191442560136236,\r\n    \"LYD\": 1.41237,\r\n    \"MAD\": 9.73535,\r\n    \"MDL\": 17.71963,\r\n    \"MKD\": 57.00696,\r\n    \"MMK\": 1449.7425,\r\n    \"MOP\": 7.99818,\r\n    \"MUR\": 37.80151,\r\n    \"MVR\": 15.451,\r\n    \"MWK\": 735.9364,\r\n    \"MXN\": 18.6494,\r\n    \"MYR\": 4.18231,\r\n    \"MZN\": 64.79825,\r\n    \"NAD\": 14.9805,\r\n    \"NGN\": 363.52,\r\n    \"NIO\": 33.70534,\r\n    \"NOK\": 9.3031,\r\n    \"NPR\": 114.13431,\r\n    \"NZD\": 1.57555,\r\n    \"OMR\": 0.38502,\r\n    \"PAB\": 0.99919,\r\n    \"PEN\": 3.38092,\r\n    \"PGK\": 3.40646,\r\n    \"PHP\": 50.71804,\r\n    \"PKR\": 154.11631,\r\n    \"PLN\": 3.9613,\r\n    \"PYG\": 6521.64205,\r\n    \"QAR\": 3.6412,\r\n    \"RON\": 4.42872,\r\n    \"RSD\": 108.8855,\r\n    \"RUB\": 63.7281,\r\n    \"RWF\": 950.17481,\r\n    \"SAR\": 3.75094,\r\n    \"SBD\": 8.23524,\r\n    \"SCR\": 13.70598,\r\n    \"SDG\": 52.7525,\r\n    \"SEK\": 9.8036,\r\n    \"SGD\": 1.4,\r\n    \"SLL\": 9720.5,\r\n    \"SOS\": 585.53,\r\n    \"SRD\": 7.45835,\r\n    \"SVC\": 8.74283,\r\n    \"SZL\": 14.93506,\r\n    \"THB\": 31.44455,\r\n    \"TJS\": 9.69119,\r\n    \"TMT\": 3.5,\r\n    \"TND\": 2.85165,\r\n    \"TOP\": 2.31662,\r\n    \"TRY\": 6.08567,\r\n    \"TTD\": 6.75088,\r\n    \"TWD\": 30.32302,\r\n    \"TZS\": 2309.815,\r\n    \"UAH\": 24.50375,\r\n    \"UGX\": 3662.2281,\r\n    \"USD\": 1,\r\n    \"UYU\": 37.89638,\r\n    \"UZS\": 9514.8477,\r\n    \"VND\": 23237.66,\r\n    \"XAF\": 607.31356,\r\n    \"XAG\": 0.054838090537687484,\r\n    \"XAU\": 0.0006214673465519438,\r\n    \"XCD\": 2.70269,\r\n    \"XLM\": 14.204545454545453,\r\n    \"XOF\": 607.31356,\r\n    \"XRP\": 3.663003663003663,\r\n    \"YER\": 250.3625,\r\n    \"ZAR\": 15.0978,\r\n    \"ZMW\": 14.66231\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { data } from './data';\n\nfunction App() {\n  const [ratesArr, setRatesArr] = useState([]);\n\n  useEffect(() => {\n    const promise = Promise.resolve(data);\n    promise.then((value) => {\n      setRatesArr(Object.entries(value.rates));\n    });\n  }, []);\n\n  return (\n    <div className=\"rates\">\n      <h1>Rates</h1>\n      <ul className=\"rates-list\">\n        {ratesArr.map(item => <li className=\"rates-item\">{item[0]} - {item[1]}</li>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}